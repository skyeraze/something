dir()\
dir()
file.path('folder1','folder2')
dir()
?dir.create
args(file.path)
?file.path
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
dir()
setwd()
old.dir
?setwd
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
args(seq)
seq(0,10,by=0.5)
my_seq <- seq(5,10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5,55,-10,6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name",'is')
my_char
paste(my_char, collapse = '')
paste(my_char, collapse = ' ')
my_name <- c(my_char, "jem")
my_name
paste(my_name, collapse = ' ')
paste("Hello", "world!", sep = " ")
paste('X','Y','Z', sep ='')
paste(c('X','Y','Z'), sep ='')
paste(1:3, c('X','Y','Z'), sep ='')
paste(LETTERS, 1:4, sep='')
LETTERS
paste(LETTERS, 1:4, sep='-')
x <- c(44,NA,5,NA)
x*3
y <- rnorm(100)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_daa ==NA
my_data ==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x <- c(rnorm(20), rep(NA,20))
info()
x
main()
x
x[1:10]
x[isn.na(x)]
x[is
.na(x)]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
args(c)
?c
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c(-2,10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =2 , norf = NA)
vert
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c'foo', 'bar','norf')
names(vect2) <- c('foo', 'bar','norf')
identical(vect,vect2)
vect['bar']
vect[c('foo','bar')]
my_vector <- c(1:20)
my_vector <- 1:20
my_vectort
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol =5)
my_matrix2
identical(my_matrix,my_matrix2)
patients <- c('Bill','Gina','Kelly','Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c('patient','age','weight','bp','rating','test')
?colnames
colnames('patient','age','weight','bp','rating','test')
colnames(cnames)
my_data
colnames(my_data) <- cnames
cnames
my_data
swirl
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10<=10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,false)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
INTS
ints
ints >5
which(c(ints)>7)
which(ints>7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
submit()
my_mean <- function(my_vector) {
x <- sum(my_vector)
y <- length(my_vector)
z <- x/y
z
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
my_mean(c(1,2,3))
submit
submit()
submti()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
View(my_mean)
my_mean(c(2,4,6,78))
my_mean(c(2,4,6,78))
my_mean(c(2,4,6))
submit()
View(my_mean)
my_mean(c(2,3,4,5))
my_mean
x
x <- (sum(my_vector))/(length(my_vector))
submit()
my_mean(c(4,5,10))
num %% divisor
submit()
submit()
submit()
remainder <- function(num, divisor) {
num %% divisor
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
View(remainder)
submit()
submit()
submit()
submit()
remainder <- function(num, divisor = 2) {
num %% divisor
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
View(remainder)
num %% divisor
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8,4,0),1)
evaluate(function(c(8,4,0),[1]))
evaluate(function(x)c(8,4,0), [1])
evaluate(function(x)(c(8,4,0)), [1])
evaluate(function(x)(c(8,4,0)), 1)
evaluate(function([x])(c(8,4,0)), 1)
evaluate(function([x])(c(8,4,0)), 1)
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]}, dat=c(8,4,0))
?paste
paste('Programming','is','fun!')
submit
submit()
submit()
telegram(telegram)
telegram('telegram'')
telegram('stop')
telegram('tele')
submit()
mad_libs('1','2','3')
submit()
submit()
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
lcass(d1)
class(d1)
unclass(d1)
d1
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- 'October 17, 1986 08:24'
t4 <- strptime(t3,'%B %d, %Y %H:%M')
t4
class(t4)
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
pollutantmean <- function(directory,pollutant,id = 1:332) {
directory <- ("./specdata/")
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
directory <- ("./specdata/")
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23) == 1.281
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
# tests
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23) == 1.281
pollutantmean("specdata", "sulfate", 1:10) == 4.064
setwd("~/Desktop/rprog_data_specdata/specdata/")
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
# tests
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23) == 1.281
library(swirl)
swirl()
heda(flags)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character)cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
?head
heda(flag_colors, n=6)
head(flag_colors, n=6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lappy(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(mtcars)
split(mtcars,mtcars$cyl)
sapply(mtcars,cyl,mean)
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
library(swirl)
swirl()
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants, n =10)
tail(plants,n=15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6,replace=TUE)
sample(1:6,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- c(0.3,0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flisp2
flips2
sum(flips2)
?rnorm\
?rnorm
rnorm(10)
rnorm(10, mean =100, sd=25)
?rpois
rpois(5,lambda = 10)
replicate(100, pois(5,10))
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y = cars$dist)
plot(x=cars$distr, y = cars$speed)
plot(x=cars$dist, y = cars$speed)
?plot
plot(x=cars$speed, y = cars$dist, xlabel = 'Speed')
plot(x=cars$speed, y = cars$dist, xlab = 'Speed')
plot(x=cars$speed, y = cars$dist, ylab = 'Stopping Distance')
plot(x=cars$speed, y = cars$dist, xlab = 'Speed',ylab = 'Stopping Distance')
args(plot)
plot(cars, main = 'My Plot')
plot(cars, main = 'My Plot',subtitle)
plot(cars, main = 'My Plot',subtitle = 'My Plot Subtitle')
plot(cars,sub = 'My Plot Subtitle')
plot(cars, col =2 )
plot(cars, xlim = c(10,15))
plot(cars, pch=2
plot(cars, pch=2)
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(formula=mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("KernSmooth")
library(KernSmooth)
install.packages(c("backports", "pkgload"))
